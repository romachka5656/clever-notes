#–Ω–∞—á–Ω–∏ —Ç—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–º–Ω—ã–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (
    QPushButton, 
    QApplication, 
    QWidget, 
    QLabel, 
    QListWidget, 
    QLineEdit, 
    QTextEdit,
    QInputDialog, 
    QHBoxLayout, 
    QVBoxLayout, 
    QFormLayout
)
import json
notes = {
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!' :
        {
        '—Ç–µ–∫—Å—Ç' : '–≠—Ç–æ —Å–∞–º–æ–µ –ª—É—á—à–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫',
        '—Ç–µ–≥–∏' : ['–¥–æ–±—Ä–æ', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']
        }



}
# with open('f.json', 'w') as file:
#     json.dump(notes, file)







app = QApplication([])
notes_win = QWidget()
notes_win.setWindowTitle('–£–º–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏')

list_notes = QListWidget() #—Å–æ–∑–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
list_notes_label = QLabel('–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫') 
button_note_del = QPushButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
button_note_create = QPushButton('–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É')
button_note_save = QPushButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
field_tag = QLineEdit('') #–ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–≥–∞
field_tag.setPlaceholderText('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥...') #–ü–æ–¥—Å–∫–∞–∑–∫–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–≥–∞
field_text = QTextEdit() #–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
button_tag_add = QPushButton('–î–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–º–µ—Ç–∫–µ')
button_tag_del = QPushButton('–û—Ç–∫—Ä–µ–ø–∏—Ç—å –æ—Ç –∑–∞–º–µ—Ç–∫–∏')
button_tag_search = QPushButton('–ò—Å–∫–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ç–µ–≥—É')
list_tags = QListWidget() #—Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–≥–æ–≤
list_tags_label = QLabel('—Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤') #–º–µ—Ç–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–æ–≤

layout_notes = QHBoxLayout() #–≥–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫
col_1 = QVBoxLayout() #–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ / 1 —Å—Ç–æ–ª–±–µ—Ü —Å–ª–µ–≤–∞
col_1.addWidget(field_text)
layout_notes.addLayout(col_1)


col_2 = QVBoxLayout() #–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–∏ / 2 —Å—Ç–æ–ª–±–µ—Ü —Å–ø—Ä–∞–≤–∞
col_2.addWidget(list_notes_label)
col_2.addWidget(list_notes)



row_1 = QHBoxLayout()
row_1.addWidget(button_note_create)
row_1.addWidget(button_note_del)

row_2 = QHBoxLayout()
row_2.addWidget(button_note_save)


col_2.addLayout(row_1)
col_2.addLayout(row_2)
col_2.addWidget(list_tags_label)
col_2.addWidget(list_tags)
col_2.addWidget(field_tag)

row_3 = QHBoxLayout()
row_3.addWidget(button_tag_add)
row_3.addWidget(button_tag_del)

row_4 = QHBoxLayout()
row_4.addWidget(button_tag_search)

col_2.addLayout(row_3)
col_2.addLayout(row_4)



layout_notes.addLayout(col_2)
notes_win.setLayout(layout_notes)

def search_tag():
    print(button_tag_search.text())
    tag = field_tag.text()
    if button_tag_search.text() == '–ò—Å–∫–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ç–µ–≥—É' and tag:
        print(tag)
        notes_filtered = {} #—Ç—É—Ç –±—É–¥—É—Ç –∑–∞–º–µ—Ç–∫–∏ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–≥–æ–º
        for note in notes:
            if tag in notes[note]['—Ç–µ–≥–∏']:
                notes_filtered[note]=notes[note]
        button_tag_search.setText('–°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫')
        list_notes.clear()
        list_tags.clear()
        list_notes.addItems(notes_filtered)
        print(button_tag_search.text())
    elif button_tag_search.text() == '–°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫':
        field_tag.clear()
        list_notes.clear()
        list_tags.clear()
        list_notes.addItems(notes)
        button_tag_search.setText('–ò—Å–∫–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ç–µ–≥—É')
        print(button_tag_search.text())
    else:
        pass

def del_note():
    if list_notes.selectedItems():
        key = list_notes.selectedItems()[0].text()
        del notes[key]
        list_notes.clear()
        list_tags.clear()
        field_text.clear()
        list_notes.addItems(notes)
        with open('f.json', 'w') as file:
            json.dump(notes, file,sort_keys=True ,ensure_ascii=False)
        print(notes)
    else:
        print('–ó–∞–º–µ—Ç–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞')

def add_notes():
    note_name, ok = QInputDialog.getText(
        notes_win, '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É', '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏: '
    )
    if ok and note_name != '':
        notes[note_name] = {'—Ç–µ–∫—Å—Ç' : '', '—Ç–µ–≥–∏' : []}
        list_notes.addItem(note_name)
        #list_tags.addItems(notes[note_name]['—Ç–µ–≥–∏'])

def show_note():
    name = list_notes.selectedItems()[0].text() #–≤—ã–±–æ—Ä –∑–∞–º–µ—Ç–∫–∏üòí
    field_text.setText(notes[name]['—Ç–µ–∫—Å—Ç'])
    list_tags.clear()
    list_tags.addItems(notes[name]['—Ç–µ–≥–∏'])


def save_note():
    if list_notes.selectedItems():
        key = list_notes.selectedItems()[0].text()
        notes[key]['—Ç–µ–∫—Å—Ç'] = field_text.toPlainText() #–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        with open('f.json', 'w') as file:
            json.dump(notes, file, sort_keys=True, ensure_ascii=False)
        print(notes)
    else:
        print('–∑–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
            

def add_tag():
    if list_notes.selectedItems():
        key = list_notes.selectedItems()[0].text()
        tag = field_tag.text()
        if not tag in notes[key]['—Ç–µ–≥–∏']:
            notes[key]['—Ç–µ–≥–∏'].append(tag)
            list_tags.addItem(tag)
            field_tag.clear()
        with open('notes_data.json', 'w') as file:
            json.dump(notes, file, sort_keys=True, ensure_ascii=False)
    else:
        print('–ó–∞–º–µ—Ç–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!')

def del_tag():
    if list_notes.selectedItems():
        key = list_notes.selectedItems()[0].text()
        tag = list_tags.selectedItems()[0].text()
        notes[key]['—Ç–µ–≥–∏'].remove(tag)
        list_tags.clear()
        list_tags.addItems(notes[key]['—Ç–µ–≥–∏'])
        with open('notes_data.json', 'w') as file:
            json.dump(notes, file, sort_keys=True, ensure_ascii=False)
        print(notes)
    else:
        print('–ó–∞–º–µ—Ç–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!')

#list_notes.itemClicked.connect(search_tag)
button_tag_search.clicked.connect(search_tag)
button_tag_add.clicked.connect(add_tag)
button_note_create.clicked.connect(add_notes)
list_notes.itemClicked.connect(show_note)


button_note_create.clicked.connect(add_notes)
list_notes.itemClicked.connect(show_note)
button_note_save.clicked.connect(save_note)
button_tag_add.clicked.connect(add_tag)
button_tag_del.clicked.connect(del_tag)
button_note_del.clicked.connect(del_note)
#button_tags_search.clicked.connect(search_tag)
with open('f.json', 'r') as file:
    notes = json.load(file)
list_notes.addItems(notes)
notes_win.show()
app.exec_()